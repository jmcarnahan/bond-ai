# Bond AI Configuration Example
# Copy this file to .env and fill in your actual values

# ==============================================================================
# PROVIDER SELECTION
# ==============================================================================
# Choose which AI provider to use (uncomment one)
# BOND_PROVIDER_CLASS="bondable.bond.providers.openai.OAIAProvider.OAIAProvider"
BOND_PROVIDER_CLASS="bondable.bond.providers.bedrock.BedrockProvider.BedrockProvider"

# ==============================================================================
# AWS BEDROCK CONFIGURATION (Required if using Bedrock provider)
# ==============================================================================
# AWS Credentials
AWS_ACCESS_KEY_ID="your_access_key_here"
AWS_SECRET_ACCESS_KEY="your_secret_key_here"
AWS_REGION="us-east-1"  # us-east-1, us-west-2, eu-central-1, etc.

# Bedrock Model Configuration
# Available models: claude-3-opus, claude-3-sonnet, claude-3-haiku, claude-3.5-sonnet, llama3-8b, llama3-70b
BEDROCK_DEFAULT_MODEL="us.anthropic.claude-3-5-sonnet-20241022-v2:0"

# S3 bucket for file storage (must be globally unique)
# Replace YOUR_ACCOUNT_ID with your actual AWS account ID
BEDROCK_S3_BUCKET="bond-bedrock-files-YOUR_ACCOUNT_ID"

# IAM Role ARN for Bedrock Agents
# Replace YOUR_ACCOUNT_ID with your actual AWS account ID
BEDROCK_AGENT_ROLE_ARN="arn:aws:iam::YOUR_ACCOUNT_ID:role/BondAIBedrockAgentRole"

# ==============================================================================
# OPENAI CONFIGURATION (Required if using OpenAI provider)
# ==============================================================================
# Standard OpenAI Configuration
OPENAI_PROJECT="proj_YOUR_PROJECT_ID"
OPENAI_KEY="sk-proj-YOUR_API_KEY"
OPENAI_MODELS="gpt-4o:Most capable GPT-4 Omni model for complex tasks"
OPENAI_DEFAULT_MODEL="gpt-4o"

# Azure OpenAI Configuration (Optional - use instead of standard OpenAI)
# AZURE_OPENAI_API_KEY="your_azure_api_key"
# AZURE_OPENAI_ENDPOINT="https://your-resource.openai.azure.com/"
# AZURE_OPENAI_API_VERSION="2025-04-01-preview"
# OPENAI_DEPLOYMENT="gpt-4o-mini"

# ==============================================================================
# AUTHENTICATION CONFIGURATION
# ==============================================================================
# OAuth2 Providers (comma-separated list: google,okta)
OAUTH2_ENABLED_PROVIDERS=google,okta

# JWT Configuration
JWT_SECRET_KEY="your_secure_jwt_secret_key_here"  # Generate with: openssl rand -hex 32
ACCESS_TOKEN_EXPIRE_MINUTES=1440  # 24 hours

# Google OAuth Configuration
GOOGLE_AUTH_CREDS_JSON='{"web":{"client_id":"YOUR_CLIENT_ID.apps.googleusercontent.com","client_secret":"YOUR_CLIENT_SECRET","auth_uri":"https://accounts.google.com/o/oauth2/auth","token_uri":"https://oauth2.googleapis.com/token","auth_provider_x509_cert_url":"https://www.googleapis.com/oauth2/v1/certs","redirect_uris":["http://localhost:8000/auth/google/callback"]}}'
GOOGLE_AUTH_VALID_EMAILS="email1@example.com,email2@example.com"  # Comma-separated list of allowed emails

# Okta OAuth Configuration
OKTA_DOMAIN="https://your-domain.okta.com"
OKTA_CLIENT_ID="your_okta_client_id"
OKTA_CLIENT_SECRET="your_okta_client_secret"
OKTA_REDIRECT_URI="http://localhost:8000/auth/okta/callback"
OKTA_SCOPES="openid,profile,email"

# ==============================================================================
# DATABASE CONFIGURATION
# ==============================================================================
# Metadata Database URL (defaults to SQLite if not specified)
# For production, consider PostgreSQL: postgresql://user:password@localhost/bond_metadata
BOND_METADATA_DB_URL="sqlite:///bond_metadata.db"

# ==============================================================================
# FIREBASE/FIRESTORE CONFIGURATION (Optional)
# ==============================================================================
# Firebase Project Configuration
FIREBASE_PROJECT_ID="your-firebase-project-id"
FIRESTORE_DATABASE_ID="your-firestore-database-id"
FIREBASE_USER_ID="test-user-id"  # Used for testing

# ==============================================================================
# GOOGLE CLOUD CONFIGURATION (Optional)
# ==============================================================================
# Option 1: Service account credentials as base64 string
# BOND_GCLOUD_SA_CREDS_STRING="base64_encoded_service_account_json"

# Option 2: Path to service account credentials file
# GCLOUD_SA_CREDS_PATH="/path/to/service-account-key.json"

# GCloud Project ID
# GCLOUD_PROJECT_ID="your-gcp-project-id"

# ==============================================================================
# MCP (Model Context Protocol) CONFIGURATION (Optional)
# ==============================================================================
# MCP Server Configuration (JSON format)
BOND_MCP_CONFIG='{
    "mcpServers": {
        "my_client": {
            "url": "http://127.0.0.1:5555/mcp",
            "transport": "streamable-http"
        }
    }
}'

# ==============================================================================
# NOTES
# ==============================================================================
# 1. Never commit your actual .env file to version control
# 2. Add .env to your .gitignore file
# 3. For production, consider using environment-specific files (.env.production, .env.staging)
# 4. Rotate API keys and secrets regularly
# 5. Use strong, unique values for JWT_SECRET_KEY and other secrets